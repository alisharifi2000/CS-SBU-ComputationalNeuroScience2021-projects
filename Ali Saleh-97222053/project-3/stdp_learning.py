# -*- coding: utf-8 -*-
"""STDP-learning.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/16xLIzDR8rMfO8JRzmXIJfCvG0p0AcOSL
"""

!pip3 install brian2

from brian2 import *

class STDP:
  def __init__(self):
    self.inp_v = None
    self.inp_spike = None
    self.out_v = None
    self.out_spike = None
    self.syn_w = None


  @staticmethod
  def create_stdp_synapses(input, output):
    # create synapse
    # return syn
    pass

  def create_one_to_one_layer(self, N, time):
    # set parametrs
    start_scope()


    eqs1 = '''
    dv/dt = (0.5 + I -v)/tau : 1
    I : 1
    tau : second
    '''

    eqs2 = '''
    dv/dt = (I + 0.5 + 5 * sin(2*pi*10*Hz*t)-v)/tau : 1
    I : 1
    tau : second

    '''
    # create input layer
    input = NeuronGroup(1, eqs1, threshold='v>1', reset='v = 0', method='exact')
    input.I = [4]
    input.tau = [10]*ms

    # create output layer
    output = NeuronGroup(1, eqs2, threshold='v>1', reset='v = 0', method='euler')
    output.I = [1.5]
    output.tau = [10]*ms

    taupre = taupost = 20*ms
    Apre = 0.1
    Apost = -0.1
    tmax = 50*ms
    syn = Synapses(input, output,  '''
              w : 1
              dapre/dt = -apre/taupre : 1 (event-driven)
              dapost/dt = -apost/taupost : 1 (event-driven)
              ''',
              on_pre='''
              apre += Apre
              w = w+apost
              ''',
              on_post='''
              apost += Apost
              w = w+apre
              ''')



    syn.connect(i=0, j=0)
    
    

  # # run model
  # def rself.un(self, N, time):
    # inp, out, syn = STDP.create_one_to_one_layer(N=N, time=time)
    inp_v = StateMonitor(input, 'v', record=True)
    inp_spike = SpikeMonitor(input)
    out_v = StateMonitor(output, 'v', record=True)
    out_spike = SpikeMonitor(output)
    syn_w = StateMonitor(syn, 'w', record=[0])

    run(time*ms)

    print("neuron 1 raster")
    plot(inp_spike.t/ms, inp_spike.i, '.')
    print("neuron 2 raster")
    plot(out_spike.t/ms, out_spike.i + 1, '.')
    plt.show()
    t = []
    for i in inp_spike.t/ms:
      t.append((i, 'pre'))

    for i in out_spike.t/ms:
      t.append((i, 'post'))
    t = sorted(t)
    
    from  more_itertools import unique_everseen

    delta_t = [0] * len(t)
    x = 0
    for i in range(1, len(t)):
      for j in range(i-1, -1, -1):
        if t[j][1] != t[i][1]:
          if t[i][1] == 'post':
            delta_t[x] = t[j][0] - t[i][0]
          else:
            delta_t[x] = t[i][0] - t[j][0]
          if delta_t[x] == 0:
            x-=1
          break
      x+=1
    w = syn_w.w[0]
    delta_w = w
    unique_w = list(unique_everseen(w))
    for i in range(1, len(unique_w)):
      delta_w[i - 1] = unique_w[i-1] - unique_w[i] 

    plt.scatter(delta_t[:len(unique_w)-1], delta_w[:len(unique_w)-1])
    plt.show()

stdp = STDP()
stdp.create_one_to_one_layer(1, 100)

def snn(patterns, inp=20, out=2):
  eqs = '''
  dv/dt = (I*1.5-v)/tau : 1
  I : 1
  tau : second
  '''

  input = NeuronGroup(inp, eqs, threshold='v>1', reset='v = 0', method='exact')
  input.tau = [1*ms]*20


  taum = 5*ms
  taupre = 20*ms
  taupost = taupre
  Ee = 0*mV
  vt = -35*mV
  vr = -60*mV
  El = -74*mV
  taue = 5*ms
  gmax = 0.05
  dApre = .01
  dApost = -dApre * taupre / taupost * 1.05
  dApost *= gmax
  dApre *= gmax

  eqs_neurons = '''
  dv/dt = (ge * (Ee-v) + El - v) / taum : volt
  dge/dt = -ge / taue : 1
  '''
  neurons = NeuronGroup(out, eqs_neurons, threshold='v>vt', reset='v = vr',method='euler')
  S = Synapses(input, neurons,
              '''w : 1
                  dApre/dt = -Apre / taupre : 1 (event-driven)
                  dApost/dt = -Apost / taupost : 1 (event-driven)''',
              on_pre='''ge += w
                      Apre += dApre
                      w = clip(w + Apost, 0, gmax)''',
              on_post='''Apost += dApost
                      w = clip(w + Apre, 0, gmax)''',
              )
  S.connect()
  S.w = 'rand() * gmax'

  for pattern in patterns:

    mon = StateMonitor(S, 'w', record=[0, 1])
    s_mon2 = SpikeMonitor(input)
    s_mon = SpikeMonitor(neurons)
    input.I = pattern
    run(10*second, report='text')

    plot(s_mon.t/ms, s_mon.i, '.r')
    xlabel('Time (ms)')
    ylabel('Neuron index');
    plt.show()

patterns = [[2, 1, 2, 1, 2, 1, 2, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 2, 1, 2, 2, 1, 2, 1, 2, 1]]
snn(patterns=patterns)

patterns = [[ 2, 1, 2, 1, 2, 2, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,]]
snn(patterns=patterns)